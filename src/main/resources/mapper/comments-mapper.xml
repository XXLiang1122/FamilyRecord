<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="comments">
       <insert id="insert" parameterType="Comments">
              insert comments(articleId,parentId,replyId,comment,floor)
              VALUES (#{articleId},#{parentId},#{replyId},#{comment},
              <choose>
                     <when test="floor != null and floor !=''">#{floor}</when>
                     <otherwise>IFNULL((select max(cf.floor) from comments cf WHERE cf.articleId = #{articleId}),1)+1</otherwise>
              </choose>
              );
       </insert>

       <select id="select" parameterType="Comments" resultType="CommentsInfo">
              SELECT
                comments.id,
                comments.articleId,
                comments.parentId,
                comments.replyId,
                u1.nickName as parentNickName,
                u2.nickName as replyNickName,
                comments.`comment`,
                comments.floor,
                comments.createTime
              FROM
                comments
              LEFT JOIN user u1 on u1.account = `comments`.parentId
              LEFT JOIN user u2 on u2.account = `comments`.replyId
              WHERE
                comments.isDelete = 0 and comments.articleId = #{articleId}
              ORDER by floor,createTime

       </select>


      <select id="getUnreadMessage" parameterType="String" resultType="Map">
          SELECT
            comments.id,
            comments.articleId,
            comments.parentId,
            comments.replyId,
            u1.nickName as parentNickName,
            u2.nickName as replyNickName,
            a1.title as articleTitle,
            comments.`comment`,
            comments.floor,
            comments.createTime
          FROM
            comments
          LEFT JOIN user u1 on u1.account = `comments`.parentId
          LEFT JOIN user u2 on u2.account = `comments`.replyId
          LEFT JOIN article a1 on a1.id = `comments`.articleId
          WHERE
            comments.isDelete = 0 and comments.isRead = 0 and comments.parentId = #{account}
          ORDER by createTime
      </select>

      <update id="setUnreadToRead" parameterType="List">
          UPDATE comments SET isRead = 1 WHERE id in (
            <foreach collection="list" item="item" separator=",">
                #{item.id}
            </foreach>
          )
      </update>
</mapper>